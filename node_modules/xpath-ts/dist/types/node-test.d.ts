import { XPathContext } from './xpath-types';
export declare class NodeTest {
    static NAMETESTANY: number;
    static NAMETESTPREFIXANY: number;
    static NAMETESTQNAME: number;
    static COMMENT: number;
    static TEXT: number;
    static PI: number;
    static NODE: number;
    static isNodeType(types: number[]): (n: Node) => boolean;
    static makeNodeTypeTest(type: number, nodeTypes: number[], stringVal: string): NodeTest;
    static hasPrefix(node: Node): any;
    static isElementOrAttribute: (n: Node) => boolean;
    static nameSpaceMatches(prefix: string | null, xpc: XPathContext, n: Node): boolean;
    static localNameMatches: (localName: string, xpc: XPathContext, n: Node) => boolean;
    static NameTestPrefixAny: {
        new (prefix: string): {
            prefix: string;
            matches(n: Node, xpc: XPathContext): boolean;
            toString(): string;
            type: number;
        };
        NAMETESTANY: number;
        NAMETESTPREFIXANY: number;
        NAMETESTQNAME: number;
        COMMENT: number;
        TEXT: number;
        PI: number;
        NODE: number;
        isNodeType(types: number[]): (n: Node) => boolean;
        makeNodeTypeTest(type: number, nodeTypes: number[], stringVal: string): NodeTest;
        hasPrefix(node: Node): any;
        isElementOrAttribute: (n: Node) => boolean;
        nameSpaceMatches(prefix: string | null, xpc: XPathContext, n: Node): boolean;
        localNameMatches: (localName: string, xpc: XPathContext, n: Node) => boolean;
        NameTestPrefixAny: any;
        NameTestQName: {
            new (name: string): {
                name: string;
                prefix: string | null;
                localName: string;
                matches(n: Node, xpc: XPathContext): boolean;
                toString(): string;
                type: number;
            };
            NAMETESTANY: number;
            NAMETESTPREFIXANY: number;
            NAMETESTQNAME: number;
            COMMENT: number;
            TEXT: number;
            PI: number;
            NODE: number;
            isNodeType(types: number[]): (n: Node) => boolean;
            makeNodeTypeTest(type: number, nodeTypes: number[], stringVal: string): NodeTest;
            hasPrefix(node: Node): any;
            isElementOrAttribute: (n: Node) => boolean;
            nameSpaceMatches(prefix: string | null, xpc: XPathContext, n: Node): boolean;
            localNameMatches: (localName: string, xpc: XPathContext, n: Node) => boolean;
            NameTestPrefixAny: any;
            NameTestQName: any;
            PITest: {
                new (name: string): {
                    name: string;
                    matches(n: Node, _xpc: XPathContext): boolean;
                    toString(): string;
                    type: number;
                };
                NAMETESTANY: number;
                NAMETESTPREFIXANY: number;
                NAMETESTQNAME: number;
                COMMENT: number;
                TEXT: number;
                PI: number;
                NODE: number;
                isNodeType(types: number[]): (n: Node) => boolean;
                makeNodeTypeTest(type: number, nodeTypes: number[], stringVal: string): NodeTest;
                hasPrefix(node: Node): any;
                isElementOrAttribute: (n: Node) => boolean;
                nameSpaceMatches(prefix: string | null, xpc: XPathContext, n: Node): boolean;
                localNameMatches: (localName: string, xpc: XPathContext, n: Node) => boolean;
                NameTestPrefixAny: any;
                NameTestQName: any;
                PITest: any;
                nameTestAny: NodeTest;
                textTest: NodeTest;
                commentTest: NodeTest;
                nodeTest: NodeTest;
                anyPiTest: NodeTest;
            };
            nameTestAny: NodeTest;
            textTest: NodeTest;
            commentTest: NodeTest;
            nodeTest: NodeTest;
            anyPiTest: NodeTest;
        };
        PITest: {
            new (name: string): {
                name: string;
                matches(n: Node, _xpc: XPathContext): boolean;
                toString(): string;
                type: number;
            };
            NAMETESTANY: number;
            NAMETESTPREFIXANY: number;
            NAMETESTQNAME: number;
            COMMENT: number;
            TEXT: number;
            PI: number;
            NODE: number;
            isNodeType(types: number[]): (n: Node) => boolean;
            makeNodeTypeTest(type: number, nodeTypes: number[], stringVal: string): NodeTest;
            hasPrefix(node: Node): any;
            isElementOrAttribute: (n: Node) => boolean;
            nameSpaceMatches(prefix: string | null, xpc: XPathContext, n: Node): boolean;
            localNameMatches: (localName: string, xpc: XPathContext, n: Node) => boolean;
            NameTestPrefixAny: any;
            NameTestQName: {
                new (name: string): {
                    name: string;
                    prefix: string | null;
                    localName: string;
                    matches(n: Node, xpc: XPathContext): boolean;
                    toString(): string;
                    type: number;
                };
                NAMETESTANY: number;
                NAMETESTPREFIXANY: number;
                NAMETESTQNAME: number;
                COMMENT: number;
                TEXT: number;
                PI: number;
                NODE: number;
                isNodeType(types: number[]): (n: Node) => boolean;
                makeNodeTypeTest(type: number, nodeTypes: number[], stringVal: string): NodeTest;
                hasPrefix(node: Node): any;
                isElementOrAttribute: (n: Node) => boolean;
                nameSpaceMatches(prefix: string | null, xpc: XPathContext, n: Node): boolean;
                localNameMatches: (localName: string, xpc: XPathContext, n: Node) => boolean;
                NameTestPrefixAny: any;
                NameTestQName: any;
                PITest: any;
                nameTestAny: NodeTest;
                textTest: NodeTest;
                commentTest: NodeTest;
                nodeTest: NodeTest;
                anyPiTest: NodeTest;
            };
            PITest: any;
            nameTestAny: NodeTest;
            textTest: NodeTest;
            commentTest: NodeTest;
            nodeTest: NodeTest;
            anyPiTest: NodeTest;
        };
        nameTestAny: NodeTest;
        textTest: NodeTest;
        commentTest: NodeTest;
        nodeTest: NodeTest;
        anyPiTest: NodeTest;
    };
    static NameTestQName: {
        new (name: string): {
            name: string;
            prefix: string | null;
            localName: string;
            matches(n: Node, xpc: XPathContext): boolean;
            toString(): string;
            type: number;
        };
        NAMETESTANY: number;
        NAMETESTPREFIXANY: number;
        NAMETESTQNAME: number;
        COMMENT: number;
        TEXT: number;
        PI: number;
        NODE: number;
        isNodeType(types: number[]): (n: Node) => boolean;
        makeNodeTypeTest(type: number, nodeTypes: number[], stringVal: string): NodeTest;
        hasPrefix(node: Node): any;
        isElementOrAttribute: (n: Node) => boolean;
        nameSpaceMatches(prefix: string | null, xpc: XPathContext, n: Node): boolean;
        localNameMatches: (localName: string, xpc: XPathContext, n: Node) => boolean;
        NameTestPrefixAny: {
            new (prefix: string): {
                prefix: string;
                matches(n: Node, xpc: XPathContext): boolean;
                toString(): string;
                type: number;
            };
            NAMETESTANY: number;
            NAMETESTPREFIXANY: number;
            NAMETESTQNAME: number;
            COMMENT: number;
            TEXT: number;
            PI: number;
            NODE: number;
            isNodeType(types: number[]): (n: Node) => boolean;
            makeNodeTypeTest(type: number, nodeTypes: number[], stringVal: string): NodeTest;
            hasPrefix(node: Node): any;
            isElementOrAttribute: (n: Node) => boolean;
            nameSpaceMatches(prefix: string | null, xpc: XPathContext, n: Node): boolean;
            localNameMatches: (localName: string, xpc: XPathContext, n: Node) => boolean;
            NameTestPrefixAny: any;
            NameTestQName: any;
            PITest: {
                new (name: string): {
                    name: string;
                    matches(n: Node, _xpc: XPathContext): boolean;
                    toString(): string;
                    type: number;
                };
                NAMETESTANY: number;
                NAMETESTPREFIXANY: number;
                NAMETESTQNAME: number;
                COMMENT: number;
                TEXT: number;
                PI: number;
                NODE: number;
                isNodeType(types: number[]): (n: Node) => boolean;
                makeNodeTypeTest(type: number, nodeTypes: number[], stringVal: string): NodeTest;
                hasPrefix(node: Node): any;
                isElementOrAttribute: (n: Node) => boolean;
                nameSpaceMatches(prefix: string | null, xpc: XPathContext, n: Node): boolean;
                localNameMatches: (localName: string, xpc: XPathContext, n: Node) => boolean;
                NameTestPrefixAny: any;
                NameTestQName: any;
                PITest: any;
                nameTestAny: NodeTest;
                textTest: NodeTest;
                commentTest: NodeTest;
                nodeTest: NodeTest;
                anyPiTest: NodeTest;
            };
            nameTestAny: NodeTest;
            textTest: NodeTest;
            commentTest: NodeTest;
            nodeTest: NodeTest;
            anyPiTest: NodeTest;
        };
        NameTestQName: any;
        PITest: {
            new (name: string): {
                name: string;
                matches(n: Node, _xpc: XPathContext): boolean;
                toString(): string;
                type: number;
            };
            NAMETESTANY: number;
            NAMETESTPREFIXANY: number;
            NAMETESTQNAME: number;
            COMMENT: number;
            TEXT: number;
            PI: number;
            NODE: number;
            isNodeType(types: number[]): (n: Node) => boolean;
            makeNodeTypeTest(type: number, nodeTypes: number[], stringVal: string): NodeTest;
            hasPrefix(node: Node): any;
            isElementOrAttribute: (n: Node) => boolean;
            nameSpaceMatches(prefix: string | null, xpc: XPathContext, n: Node): boolean;
            localNameMatches: (localName: string, xpc: XPathContext, n: Node) => boolean;
            NameTestPrefixAny: {
                new (prefix: string): {
                    prefix: string;
                    matches(n: Node, xpc: XPathContext): boolean;
                    toString(): string;
                    type: number;
                };
                NAMETESTANY: number;
                NAMETESTPREFIXANY: number;
                NAMETESTQNAME: number;
                COMMENT: number;
                TEXT: number;
                PI: number;
                NODE: number;
                isNodeType(types: number[]): (n: Node) => boolean;
                makeNodeTypeTest(type: number, nodeTypes: number[], stringVal: string): NodeTest;
                hasPrefix(node: Node): any;
                isElementOrAttribute: (n: Node) => boolean;
                nameSpaceMatches(prefix: string | null, xpc: XPathContext, n: Node): boolean;
                localNameMatches: (localName: string, xpc: XPathContext, n: Node) => boolean;
                NameTestPrefixAny: any;
                NameTestQName: any;
                PITest: any;
                nameTestAny: NodeTest;
                textTest: NodeTest;
                commentTest: NodeTest;
                nodeTest: NodeTest;
                anyPiTest: NodeTest;
            };
            NameTestQName: any;
            PITest: any;
            nameTestAny: NodeTest;
            textTest: NodeTest;
            commentTest: NodeTest;
            nodeTest: NodeTest;
            anyPiTest: NodeTest;
        };
        nameTestAny: NodeTest;
        textTest: NodeTest;
        commentTest: NodeTest;
        nodeTest: NodeTest;
        anyPiTest: NodeTest;
    };
    static PITest: {
        new (name: string): {
            name: string;
            matches(n: Node, _xpc: XPathContext): boolean;
            toString(): string;
            type: number;
        };
        NAMETESTANY: number;
        NAMETESTPREFIXANY: number;
        NAMETESTQNAME: number;
        COMMENT: number;
        TEXT: number;
        PI: number;
        NODE: number;
        isNodeType(types: number[]): (n: Node) => boolean;
        makeNodeTypeTest(type: number, nodeTypes: number[], stringVal: string): NodeTest;
        hasPrefix(node: Node): any;
        isElementOrAttribute: (n: Node) => boolean;
        nameSpaceMatches(prefix: string | null, xpc: XPathContext, n: Node): boolean;
        localNameMatches: (localName: string, xpc: XPathContext, n: Node) => boolean;
        NameTestPrefixAny: {
            new (prefix: string): {
                prefix: string;
                matches(n: Node, xpc: XPathContext): boolean;
                toString(): string;
                type: number;
            };
            NAMETESTANY: number;
            NAMETESTPREFIXANY: number;
            NAMETESTQNAME: number;
            COMMENT: number;
            TEXT: number;
            PI: number;
            NODE: number;
            isNodeType(types: number[]): (n: Node) => boolean;
            makeNodeTypeTest(type: number, nodeTypes: number[], stringVal: string): NodeTest;
            hasPrefix(node: Node): any;
            isElementOrAttribute: (n: Node) => boolean;
            nameSpaceMatches(prefix: string | null, xpc: XPathContext, n: Node): boolean;
            localNameMatches: (localName: string, xpc: XPathContext, n: Node) => boolean;
            NameTestPrefixAny: any;
            NameTestQName: {
                new (name: string): {
                    name: string;
                    prefix: string | null;
                    localName: string;
                    matches(n: Node, xpc: XPathContext): boolean;
                    toString(): string;
                    type: number;
                };
                NAMETESTANY: number;
                NAMETESTPREFIXANY: number;
                NAMETESTQNAME: number;
                COMMENT: number;
                TEXT: number;
                PI: number;
                NODE: number;
                isNodeType(types: number[]): (n: Node) => boolean;
                makeNodeTypeTest(type: number, nodeTypes: number[], stringVal: string): NodeTest;
                hasPrefix(node: Node): any;
                isElementOrAttribute: (n: Node) => boolean;
                nameSpaceMatches(prefix: string | null, xpc: XPathContext, n: Node): boolean;
                localNameMatches: (localName: string, xpc: XPathContext, n: Node) => boolean;
                NameTestPrefixAny: any;
                NameTestQName: any;
                PITest: any;
                nameTestAny: NodeTest;
                textTest: NodeTest;
                commentTest: NodeTest;
                nodeTest: NodeTest;
                anyPiTest: NodeTest;
            };
            PITest: any;
            nameTestAny: NodeTest;
            textTest: NodeTest;
            commentTest: NodeTest;
            nodeTest: NodeTest;
            anyPiTest: NodeTest;
        };
        NameTestQName: {
            new (name: string): {
                name: string;
                prefix: string | null;
                localName: string;
                matches(n: Node, xpc: XPathContext): boolean;
                toString(): string;
                type: number;
            };
            NAMETESTANY: number;
            NAMETESTPREFIXANY: number;
            NAMETESTQNAME: number;
            COMMENT: number;
            TEXT: number;
            PI: number;
            NODE: number;
            isNodeType(types: number[]): (n: Node) => boolean;
            makeNodeTypeTest(type: number, nodeTypes: number[], stringVal: string): NodeTest;
            hasPrefix(node: Node): any;
            isElementOrAttribute: (n: Node) => boolean;
            nameSpaceMatches(prefix: string | null, xpc: XPathContext, n: Node): boolean;
            localNameMatches: (localName: string, xpc: XPathContext, n: Node) => boolean;
            NameTestPrefixAny: {
                new (prefix: string): {
                    prefix: string;
                    matches(n: Node, xpc: XPathContext): boolean;
                    toString(): string;
                    type: number;
                };
                NAMETESTANY: number;
                NAMETESTPREFIXANY: number;
                NAMETESTQNAME: number;
                COMMENT: number;
                TEXT: number;
                PI: number;
                NODE: number;
                isNodeType(types: number[]): (n: Node) => boolean;
                makeNodeTypeTest(type: number, nodeTypes: number[], stringVal: string): NodeTest;
                hasPrefix(node: Node): any;
                isElementOrAttribute: (n: Node) => boolean;
                nameSpaceMatches(prefix: string | null, xpc: XPathContext, n: Node): boolean;
                localNameMatches: (localName: string, xpc: XPathContext, n: Node) => boolean;
                NameTestPrefixAny: any;
                NameTestQName: any;
                PITest: any;
                nameTestAny: NodeTest;
                textTest: NodeTest;
                commentTest: NodeTest;
                nodeTest: NodeTest;
                anyPiTest: NodeTest;
            };
            NameTestQName: any;
            PITest: any;
            nameTestAny: NodeTest;
            textTest: NodeTest;
            commentTest: NodeTest;
            nodeTest: NodeTest;
            anyPiTest: NodeTest;
        };
        PITest: any;
        nameTestAny: NodeTest;
        textTest: NodeTest;
        commentTest: NodeTest;
        nodeTest: NodeTest;
        anyPiTest: NodeTest;
    };
    static nameTestAny: NodeTest;
    static textTest: NodeTest;
    static commentTest: NodeTest;
    static nodeTest: NodeTest;
    static anyPiTest: NodeTest;
    type: number;
    constructor(type: number);
    toString(): string;
    matches(_n: Node, _xpc: XPathContext): boolean;
}
